swagger: "2.0"
info:
  description: "These are the endpoints API around <b>Juez-LTI</b> project. <br />You can find out more about <b>Juez-LTI</b> at [https://juezlti.eu](https://juezlti.eu)."
  version: "0.1.0"
  title: "Juez-LTI"
  termsOfService: "https://juezlti.eu/privacy-policy/"
  contact:
    email: "info@juezlti.eu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "code.juezlti.eu"
basePath: "/v1"
tags:
- name: "centralRepository"
  description: "Centralized repository with different exercise types"
  externalDocs:
    description: "Find out more"
    url: "https://juezlti.eu/central-repository/"
- name: "authorKitAPI"
  description: "Access to AuthorKit API"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/FGPE-Erasmus/authorkit-api"
- name: "validators"
  description: "System to grade exercises"
  externalDocs:
    description: "Find out more"
    url: "https://juezlti.eu/validators/"
- name: "feedbackSystem"
  description: "System for the feedback to students"
  externalDocs:
    description: "Find out more"
    url: "https://juezlti.eu/feedback-system/"
schemes:
- "https"
- "http"
paths:
  /sets:
    get:
      tags:
      - "centralRepository"
      summary: "Get sets of exercises from central repository to reuse"
      description: ""
      operationId: "getSetsFrom2CR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
    post:
      tags:
      - "centralRepository"
      summary: "Add a new set of exercises to central repository"
      description: ""
      operationId: "addSet2CR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that needs to be added to the Central Repository, similar to project in AuthorKit API"
        required: true
        schema:
          $ref: "#/definitions/Project"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "centralRepository"
      summary: "Update an existing set of exercises "
      description: ""
      operationId: "updateSet2CR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that needs to be updated to the Central Repository, similar to project in AuthorKit API"
        required: true
        schema:
          $ref: "#/definitions/Project"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Project not found"
        "405":
          description: "Validation exception"
  /sets/{setId}/exercises:
    get:
      tags:
      - "centralRepository"
      summary: "Get exercises of a sets from central repository"
      description: ""
      operationId: "getExercisesSetFromCR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "405":
          description: "Invalid input"
  /sets/{setId}/exercises/{exerciseId}/moveUp:
    put:
      tags:
      - "centralRepository"
      summary: "Move up exercise into a set in central repository"
      description: ""
      operationId: "moveUpExerciseSetFromCR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises"
        required: true
        type: "integer"
        format: "int64"
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to move"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Set or exercise not found"
  /sets/{setId}/exercises/{exerciseId}:
    delete:
      tags:
      - "centralRepository"
      summary: "Delete a exercise from a set of central repository"
      description: ""
      operationId: "deletExerciseInSetFromCR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises"
        required: true
        type: "integer"
        format: "int64"
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to move"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Set or exercise not found"
  /sets/{setId}/import:
    post:
      tags:
      - "centralRepository"
      summary: "Generate new set importing exercises from a set from central repository"
      description: ""
      operationId: "importSetFromCR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Set not found"
  /sets/{setId}/exercises:
    post:
      tags:
      - "centralRepository"
      summary: "Adding a exercise to a set of exercises"
      description: ""
      operationId: "addExercise2Set"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "exercise sent by codetest to be stored into Central Repository"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        "200":
          description: "successful operation. Return exercises"
          schema:
            $ref: "#/definitions/Exercise"
        "400":
          description: "Invalid setId supplied"
        "404":
          description: "Set not found"
  /sets/{setId}/exercises/{exerciseId}:
    put:
      tags:
      - "centralRepository"
      summary: "Update a exercise related to a set of exercises"
      description: ""
      operationId: "updateExercise2Set"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises"
        required: true
        type: "integer"
        format: "int64"
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "exercise sent by codetest to be updated into Central Repository"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        "200":
          description: "successful operation. Return exercises"
          schema:
            $ref: "#/definitions/Exercise"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Set or exercise not found"
  /sets/{setId}/exercises/import:
    post:
      tags:
      - "centralRepository"
      summary: "Generate new set importing exercises from a set from central repository"
      description: ""
      operationId: "importExercisesSetFromCR"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "setId"
        in: "path"
        description: "ID of set of exercises to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "exercisesId"
        in: "formData"
        description: "IDs of exercises to import from central repository in a set"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Set not found"
  /sets/search:
    get:
      tags:
      - "centralRepository"
      summary: "Get exercises of a sets from central repository"
      description: ""
      operationId: "searchSetFromCR"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "query"
        in: "formData"
        description: "string to search"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
                $ref: "#/definitions/Project"
  /projects:
    post:
      tags:
      - "authorKitAPI"
      summary: "Add a new set of exercises to central repository"
      description: ""
      operationId: "addProject2AkAPI"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that needs to be added to the Central Repository, similar to project in AuthorKit API"
        required: true
        schema:
          $ref: "#/definitions/Project"
      responses:
        "405":
          description: "Invalid input"
  /exercises/{exerciseId}:
    get:
      tags:
      - "authorKitAPI"
      summary: "Get a exercise from central repository"
      description: ""
      operationId: "getExerciseFromCR"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Exercise"
        "405":
          description: "Invalid input"
  /capabilities:
    get:
      tags:
      - "validators"
      summary: "Get list of capabilities from Validator System"
      description: ""
      operationId: "listCapabilities"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
                type: "string"
  /evaluate/{exerciseId}:
    post:
      tags:
      - "validators"
      summary: "Evaluate the student's answer to a exercise"
      description: ""
      operationId: "evaluateExercises"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to evaluate"
        required: true
        type: "integer"
        format: "int64"
      - name: "answer"
        in: "formData"
        description: "solution send by student"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation. Return Ticket and Report"
          schema:
            $ref: "#/definitions/ValidatorResponse"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercise not found"
  /exercises/{exerciseId}/getOutput:
    put:
      tags:
      - "validators"
      summary: "Get outputs related to the exercise's inputs"
      description: ""
      operationId: "getOutputFrom Exercise"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to evaluate"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation. Return exercise"
          schema:
            $ref: "#/definitions/Exercise"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Exercise not found"
  /tickets:
    post:
      tags:
      - "feedbackSystem"
      summary: "Add a new ticket to Feedback System"
      description: ""
      operationId: "addTicket2FS"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ticket object that needs to be added to the Feedback System"
        required: true
        schema:
          $ref: "#/definitions/Ticket"
      responses:
        "405":
          description: "Invalid input"
  /reports/{ticketId}/{level}:
    get:
      tags:
      - "feedbackSystem"
      summary: "Get a exercise from central repository"
      description: ""
      operationId: "getTicketFromFS"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ticketId"
        in: "path"
        description: "ID of ticket to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "level"
        in: "path"
        description: "level of the feedback"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Exercise"
        "405":
          description: "Invalid input"
securityDefinitions:
  centralRepository_auth:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Project:
    type: "object"
    required:
    - "name"
    - "is_public"
    - "owner"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "doggie"
      description:
        type: "string"
      owner:
        $ref: "#/definitions/User"
      status:
        type: "string"
        description: "Set of exercises"
        enum:
        - "draft"
        - "announced"
        - "open"
        - "closed"
    xml:
      name: "Project"
  Exercise:
    type: "object"
    required:
    - "title"
    - "author"
    - "status"
    - "platform"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      module:
        type: "string"
      author:
        $ref: "#/definitions/User"
      type:
        type: "string"
      difficulty:
        type: "string"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "draft"
        - "announced"
        - "open"
        - "closed"
      keywords:
        type: "array"
        items:
          type: "string"
      event:
        type: "string"
      platform:
        type: "string"
      created_at:
        type: "number"
      updated_at:
        type: "number"
    xml:
      name: "Project"
  ValidatorResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
  Ticket:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more"
  url: "https://juezlti.eu/central-repository/"
